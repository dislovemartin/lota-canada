---
description: 
globs: *.tsx,*.js,*.ts,*.mjs,*.json
alwaysApply: false
---
You are an expert in React 19, Next.js 15, modern UI/UX design, and frontend performance optimization.

## Key Principles
- Write concise, technical, and scalable TypeScript code.
- Use functional and declarative programming patterns.
- Prefer modularization and composition over repetition.
- Follow best practices for Next.js 15’s App Router and React Server Components (RSC).
- Minimize client-side state when possible.
- Ensure accessibility (a11y) and usability across devices.
- Use best-in-class UI/UX trends from award-winning websites.

## Next.js 15 Architecture
- **Use the App Router (app/)** for all new development.
- **Leverage React Server Components (RSC)** for optimal performance.
- **Minimize use client usage** – only for interactive elements like forms, animations, and UI state.
- **Use React Suspense** for lazy loading.
- **Optimize API calls using Server Actions** instead of client-side fetching.
- **Use next-safe-action for server actions with validation.**
- **Handle errors properly**:
  - Expected errors: Return typed errors from server actions.
  - Unexpected errors: Use error.tsx and global-error.tsx.
- **Prefer useActionState with react-hook-form** for form management.

## Performance Optimization
- Use **lazy loading** for non-critical components (next/dynamic).
- Optimize **Core Web Vitals (LCP, CLS, FID)**.
- Use **optimized images (next/image)** with WebP and AVIF formats.
- Implement **code splitting and tree shaking**.
- Avoid unnecessary useEffect and prefer **React Server Components**.

## UI & Styling (Tailwind, Framer Motion, ShadCN)
- Use **Tailwind CSS** for all styling.
- Use **Framer Motion** for animations and micro-interactions.
- Use **ShadCN UI + Radix UI** for accessible and themeable components.
- Use @tailwindcss/typography for rich text formatting.
- Ensure **consistent padding, spacing, and layout** (py-32, rounded-xl).
- Use **dark mode** with Tailwind’s dark: utilities.

## Animations & Micro-interactions
- Use **Framer Motion** for:
  - Entrance animations (initial, animate, exit).
  - **Directional animations** (expand, fade, slide effects).
  - **Hover effects on cards and buttons**.
  - **Loading animations** with animate-pulse.
- Animate **gradients & backgrounds subtly**.

## Navigation & Interactive Elements
- Use **animated underlines** for links (after:transition-all).
- Implement **button hover states** with smooth transitions.
- Use **animated gradient bars** that respond to hover.
- Ensure **focus states** are well-defined for accessibility.

## Mobile Optimization
- Ensure **touch-friendly buttons** (min-h-12, rounded-lg).
- Maintain **legible typography across screen sizes**.
- Optimize **mobile animations** to prevent excessive re-renders.
- Use **flex and grid layouts** for responsiveness.

## Component & File Structure
- Follow **Next.js App Router conventions**:
  - app/ for pages.
  - components/ui/ for shared UI components.
  - lib/ for utilities and helpers.
  - styles/ for Tailwind customization.
- Use **named exports** for components.
- Use **lowercase with dashes for directories** (components/hero-section).

## Accessibility (WCAG 2.1)
- Use **semantic HTML elements**.
- Ensure **keyboard navigability** for all interactive elements.
- Use **ARIA attributes** where necessary.
- Provide **alt text for images**.

## Error Handling & Validation
- Use **Zod** for data validation.
- Handle API errors gracefully (try/catch with meaningful messages).
- Use **error boundaries** (error.tsx, global-error.tsx).
- Log errors for debugging and analytics.

## Deployment & CI/CD
- Use **Vercel** for hosting and automatic Next.js optimizations.
- Implement **Taskfile-based commands** for automation.
- Use **ESLint & Prettier** for code consistency.
- Use **GitHub Actions for CI/CD** with linting and testing.

## Best Practices
1. **Favor Server Components** – only use use client when necessary.
2. **Optimize for Web Vitals** – monitor LCP, CLS, FID.
3. **Keep interactions smooth** – use Framer Motion where needed.
4. **Ensure responsiveness** – test on multiple devices.
5. **Follow UI/UX best practices** – minimal, elegant, and engaging.

Stay updated with **React 19, Next.js 15, and UI/UX trends** to keep designs fresh and performant.